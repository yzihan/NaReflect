{"ast":null,"code":"export const checkBehavior = behavior => {\n  return behavior === undefined || behavior === \"auto\" || behavior === \"instant\" || behavior === \"smooth\";\n};\nexport function elementScrollXY(x, y) {\n  this.scrollLeft = x;\n  this.scrollTop = y;\n}\nexport const failedExecute = function (method, object) {\n  let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"cannot convert to dictionary.\";\n  return `Failed to execute '${method}' on '${object}': ${reason}`;\n};\nexport const failedExecuteInvalidEnumValue = (method, object, value) => failedExecute(method, object, `The provided value '${value}' is not a valid enum value of type ScrollBehavior.`);\n/* eslint-disable */\nexport const backupMethod = (proto, method, fallback) => {\n  var _a;\n  const backup = `__SEAMLESS.BACKUP$${method}`;\n  if (!proto[backup] && proto[method] && !((_a = proto[method]) === null || _a === void 0 ? void 0 : _a.__isPolyfill)) {\n    proto[backup] = proto[method];\n  }\n  return proto[backup] || fallback;\n};\n/* eslint-enable */\nexport const isObject = value => {\n  const type = typeof value;\n  return value !== null && (type === \"object\" || type === \"function\");\n};\nexport const isScrollBehaviorSupported = config => \"scrollBehavior\" in window.document.documentElement.style && (config === null || config === void 0 ? void 0 : config.forcePolyfill) !== true;\nexport const markPolyfill = method => {\n  Object.defineProperty(method, \"__isPolyfill\", {\n    value: true\n  });\n};\nexport const modifyPrototypes = (prop, func) => {\n  markPolyfill(func);\n  [HTMLElement.prototype, SVGElement.prototype, Element.prototype].forEach(prototype => {\n    backupMethod(prototype, prop);\n    prototype[prop] = func;\n  });\n};\n/**\n * - On Chrome and Firefox, document.scrollingElement will return the <html> element.\n * - Safari, document.scrollingElement will return the <body> element.\n * - On Edge, document.scrollingElement will return the <body> element.\n * - IE11 does not support document.scrollingElement, but you can assume its <html>.\n */\nexport const scrollingElement = element => element.ownerDocument.scrollingElement || element.ownerDocument.documentElement;","map":{"version":3,"mappings":"AAEA,OAAO,MAAMA,aAAa,GAAIC,QAAiB,IAA4C;EACvF,OAAOA,QAAQ,KAAKC,SAAS,IAAID,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,QAAQ;AAC3G,CAAC;AAED,OAAM,SAAUE,eAAe,CAAgBC,CAAS,EAAEC,CAAS;EAC/D,IAAI,CAACC,UAAU,GAAGF,CAAC;EACnB,IAAI,CAACG,SAAS,GAAGF,CAAC;AACtB;AAEA,OAAO,MAAMG,aAAa,GAAG,UAACC,MAAc,EAAEC,MAAc;EAAA,IAAEC,MAAM,uEAAG,+BAA+B;EAAA,OAClG,sBAAsBF,MAAM,SAASC,MAAM,MAAMC,MAAM,EAAE;AAAA;AAE7D,OAAO,MAAMC,6BAA6B,GAAG,CAACH,MAAc,EAAEC,MAAc,EAAEG,KAAa,KACvFL,aAAa,CAACC,MAAM,EAAEC,MAAM,EAAE,uBAAuBG,KAAK,qDAAqD,CAAC;AASpH;AACA,OAAO,MAAMC,YAAY,GAAiB,CAACC,KAAU,EAAEN,MAAc,EAAEO,QAAkB,KAAI;;EACzF,MAAMC,MAAM,GAAG,qBAAqBR,MAAM,EAAE;EAE5C,IAAI,CAACM,KAAK,CAACE,MAAM,CAAC,IAAIF,KAAK,CAACN,MAAM,CAAC,IAAI,EAAC,WAAK,CAACA,MAAM,CAAC,0CAAES,YAAY,GAAE;IACjEH,KAAK,CAACE,MAAM,CAAC,GAAGF,KAAK,CAACN,MAAM,CAAC;;EAGjC,OAAOM,KAAK,CAACE,MAAM,CAAC,IAAID,QAAQ;AACpC,CAAC;AACD;AAEA,OAAO,MAAMG,QAAQ,GAAIN,KAAc,IAAa;EAChD,MAAMO,IAAI,GAAG,OAAOP,KAAK;EACzB,OAAOA,KAAK,KAAK,IAAI,KAAKO,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,UAAU,CAAC;AACvE,CAAC;AAED,OAAO,MAAMC,yBAAyB,GAAIC,MAAsB,IAC5D,gBAAgB,IAAIC,MAAM,CAACC,QAAQ,CAACC,eAAe,CAACC,KAAK,IAAI,OAAM,aAANJ,MAAM,uBAANA,MAAM,CAAEK,aAAa,MAAK,IAAI;AAE/F,OAAO,MAAMC,YAAY,GAAInB,MAAkB,IAAU;EACrDoB,MAAM,CAACC,cAAc,CAACrB,MAAM,EAAE,cAAc,EAAE;IAAEI,KAAK,EAAE;EAAI,CAAE,CAAC;AAClE,CAAC;AAID,OAAO,MAAMkB,gBAAgB,GAAG,CAC5BC,IAAO,EACPC,IAAkB,KACZ;EACNL,YAAY,CAACK,IAAI,CAAC;EAClB,CAACC,WAAW,CAACC,SAAS,EAAEC,UAAU,CAACD,SAAS,EAAEE,OAAO,CAACF,SAAS,CAAC,CAACG,OAAO,CAAEH,SAAS,IAAI;IACnFrB,YAAY,CAACqB,SAAS,EAAEH,IAAI,CAAC;IAC7BG,SAAS,CAACH,IAAI,CAAC,GAAGC,IAAI;EAC1B,CAAC,CAAC;AACN,CAAC;AAED;;;;;;AAMA,OAAO,MAAMM,gBAAgB,GAAIC,OAAgB,IAC7CA,OAAO,CAACC,aAAa,CAACF,gBAAgB,IAAIC,OAAO,CAACC,aAAa,CAAChB,eAAe","names":["checkBehavior","behavior","undefined","elementScrollXY","x","y","scrollLeft","scrollTop","failedExecute","method","object","reason","failedExecuteInvalidEnumValue","value","backupMethod","proto","fallback","backup","__isPolyfill","isObject","type","isScrollBehaviorSupported","config","window","document","documentElement","style","forcePolyfill","markPolyfill","Object","defineProperty","modifyPrototypes","prop","func","HTMLElement","prototype","SVGElement","Element","forEach","scrollingElement","element","ownerDocument"],"sources":["/Users/yiningmao/Desktop/DreamVideo/my-app/node_modules/seamless-scroll-polyfill/src/common.ts"],"sourcesContent":["import type { IScrollConfig } from \"./scroll-step\";\n\nexport const checkBehavior = (behavior?: string): behavior is undefined | ScrollBehavior => {\n    return behavior === undefined || behavior === \"auto\" || behavior === \"instant\" || behavior === \"smooth\";\n};\n\nexport function elementScrollXY(this: Element, x: number, y: number): void {\n    this.scrollLeft = x;\n    this.scrollTop = y;\n}\n\nexport const failedExecute = (method: string, object: string, reason = \"cannot convert to dictionary.\"): string =>\n    `Failed to execute '${method}' on '${object}': ${reason}`;\n\nexport const failedExecuteInvalidEnumValue = (method: string, object: string, value: string): string =>\n    failedExecute(method, object, `The provided value '${value}' is not a valid enum value of type ScrollBehavior.`);\n\ninterface BackupMethod {\n    <K extends keyof Element>(proto: Element, method: K): Element[K] | undefined;\n    <K extends keyof Element>(proto: Element, method: K, fallback: unknown): Element[K];\n    <K extends keyof Window>(proto: Window, method: K): Window[K] | undefined;\n    <K extends keyof Window>(proto: Window, method: K, fallback: unknown): Window[K];\n}\n\n/* eslint-disable */\nexport const backupMethod: BackupMethod = (proto: any, method: string, fallback?: unknown) => {\n    const backup = `__SEAMLESS.BACKUP$${method}`;\n\n    if (!proto[backup] && proto[method] && !proto[method]?.__isPolyfill) {\n        proto[backup] = proto[method];\n    }\n\n    return proto[backup] || fallback;\n};\n/* eslint-enable */\n\nexport const isObject = (value: unknown): boolean => {\n    const type = typeof value;\n    return value !== null && (type === \"object\" || type === \"function\");\n};\n\nexport const isScrollBehaviorSupported = (config?: IScrollConfig): boolean =>\n    \"scrollBehavior\" in window.document.documentElement.style && config?.forcePolyfill !== true;\n\nexport const markPolyfill = (method: () => void): void => {\n    Object.defineProperty(method, \"__isPolyfill\", { value: true });\n};\n\ntype Prototype = typeof HTMLElement.prototype | typeof SVGElement.prototype | typeof Element.prototype;\n\nexport const modifyPrototypes = <T extends \"scroll\" | \"scrollTo\" | \"scrollBy\" | \"scrollIntoView\">(\n    prop: T,\n    func: Prototype[T],\n): void => {\n    markPolyfill(func);\n    [HTMLElement.prototype, SVGElement.prototype, Element.prototype].forEach((prototype) => {\n        backupMethod(prototype, prop);\n        prototype[prop] = func;\n    });\n};\n\n/**\n * - On Chrome and Firefox, document.scrollingElement will return the <html> element.\n * - Safari, document.scrollingElement will return the <body> element.\n * - On Edge, document.scrollingElement will return the <body> element.\n * - IE11 does not support document.scrollingElement, but you can assume its <html>.\n */\nexport const scrollingElement = (element: Element): Element =>\n    element.ownerDocument.scrollingElement || element.ownerDocument.documentElement;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}